apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

apply plugin: 'com.github.dcendents.android-maven'

def modelName = getName()

def modelConfig = libModelConfigs[modelName]

group = GROUP
version = modelConfig['libVersionName']

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName modelConfig["libVersionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions.abortOnError = false
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compileOnly 'com.github.bxvip2020:android-support:26.0.2.11.12'
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly "com.qihoo360.replugin:replugin-plugin-lib:$replugin_version"
}

task androidJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}
